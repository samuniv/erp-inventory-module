name: CI/CD Validation

on:
  workflow_dispatch:
    inputs:
      validation_type:
        description: "Type of validation to perform"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - workflows-only
          - branch-protection-only
          - performance-check
  schedule:
    # Run validation weekly on Sundays at 3 AM UTC
    - cron: "0 3 * * 0"

jobs:
  validate-workflows:
    name: Validate Workflow Configuration
    runs-on: ubuntu-latest
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'workflows-only' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate workflow syntax
        run: |
          echo "üîç Validating GitHub Actions workflow syntax..."

          # Check if all workflow files are valid YAML
          for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
            if [ -f "$workflow" ]; then
              echo "Checking $workflow..."
              python -c "import yaml; yaml.safe_load(open('$workflow'))" || {
                echo "‚ùå Invalid YAML syntax in $workflow"
                exit 1
              }
              echo "‚úÖ $workflow is valid"
            fi
          done

      - name: Check required workflow files
        run: |
          echo "üìã Checking for required workflow files..."

          required_workflows=(
            ".github/workflows/angular.yml"
            ".github/workflows/dotnet.yml" 
            ".github/workflows/integration-tests.yml"
          )

          missing_workflows=()

          for workflow in "${required_workflows[@]}"; do
            if [ ! -f "$workflow" ]; then
              missing_workflows+=("$workflow")
            else
              echo "‚úÖ Found $workflow"
            fi
          done

          if [ ${#missing_workflows[@]} -gt 0 ]; then
            echo "‚ùå Missing required workflow files:"
            printf '%s\n' "${missing_workflows[@]}"
            exit 1
          fi

          echo "‚úÖ All required workflow files are present"

      - name: Validate workflow triggers
        run: |
          echo "üéØ Validating workflow triggers..."

          # Check Angular workflow triggers
          if ! grep -q "branches: \[main, develop\]" .github/workflows/angular.yml; then
            echo "‚ùå Angular workflow missing proper branch triggers"
            exit 1
          fi

          # Check .NET workflow triggers  
          if ! grep -q "branches: \[main, develop\]" .github/workflows/dotnet.yml; then
            echo "‚ùå .NET workflow missing proper branch triggers"
            exit 1
          fi

          # Check integration tests triggers
          if ! grep -q "workflow_dispatch:" .github/workflows/integration-tests.yml; then
            echo "‚ùå Integration tests workflow missing manual dispatch trigger"
            exit 1
          fi

          echo "‚úÖ All workflow triggers are properly configured"

      - name: Check path-based filtering
        run: |
          echo "üìÅ Validating path-based filtering..."

          # Check if Angular workflow has proper path filtering
          if ! grep -A 5 "paths:" .github/workflows/angular.yml | grep -q "erp-inventory-angular"; then
            echo "‚ùå Angular workflow missing proper path filtering"
            exit 1
          fi

          # Check if .NET workflow has proper path filtering
          if ! grep -A 10 "paths:" .github/workflows/dotnet.yml | grep -q "src/"; then
            echo "‚ùå .NET workflow missing proper path filtering"
            exit 1
          fi

          echo "‚úÖ Path-based filtering is properly configured"

  validate-branch-protection:
    name: Validate Branch Protection Rules
    runs-on: ubuntu-latest
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'branch-protection-only' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check branch protection documentation
        run: |
          echo "üìö Checking branch protection documentation..."

          if [ ! -f ".github/BRANCH_PROTECTION.md" ]; then
            echo "‚ùå Branch protection documentation missing"
            exit 1
          fi

          echo "‚úÖ Branch protection documentation exists"

      - name: Validate branch protection scripts
        run: |
          echo "üîß Validating branch protection setup scripts..."

          scripts=(
            "scripts/setup-branch-protection.sh"
            "scripts/setup-branch-protection.ps1"
          )

          for script in "${scripts[@]}"; do
            if [ ! -f "$script" ]; then
              echo "‚ùå Missing script: $script"
              exit 1
            fi
            echo "‚úÖ Found $script"
          done

      - name: Check GitHub CLI requirements
        run: |
          echo "üîç Documenting GitHub CLI setup requirements..."

          echo "To set up branch protection rules, ensure:"
          echo "1. GitHub CLI is installed (https://cli.github.com/)"
          echo "2. User is authenticated: gh auth login"
          echo "3. User has admin permissions on the repository"
          echo "4. Run: ./scripts/setup-branch-protection.sh"

  performance-check:
    name: CI/CD Performance Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.validation_type == 'all' || github.event.inputs.validation_type == 'performance-check' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze workflow efficiency
        run: |
          echo "‚ö° Analyzing CI/CD performance characteristics..."

          echo "üìä Workflow Complexity Analysis:"
          echo "================================"

          # Count jobs per workflow
          for workflow in .github/workflows/*.yml; do
            if [ -f "$workflow" ]; then
              job_count=$(grep -c "^  [a-zA-Z0-9_-]*:$" "$workflow" | head -1)
              echo "$(basename "$workflow"): $job_count jobs"
            fi
          done

          echo ""
          echo "üîÑ Parallelization Opportunities:"
          echo "================================="

          # Check for matrix strategies
          if grep -q "strategy:" .github/workflows/*.yml; then
            echo "‚úÖ Matrix strategies found - good for parallelization"
          else
            echo "‚ö†Ô∏è  No matrix strategies found - consider adding for performance"
          fi

          # Check for caching
          if grep -q "actions/cache@" .github/workflows/*.yml; then
            echo "‚úÖ Caching configured - good for performance"
          else
            echo "‚ö†Ô∏è  No caching found - consider adding for faster builds"
          fi

      - name: Check resource optimization
        run: |
          echo "üéØ Resource Optimization Analysis:"
          echo "=================================="

          # Check for resource-intensive operations
          if grep -q "integration-tests" .github/workflows/*.yml; then
            echo "‚ö†Ô∏è  Integration tests detected - ensure proper resource management"
          fi

          if grep -q "docker" .github/workflows/*.yml; then
            echo "‚ö†Ô∏è  Docker operations detected - consider layer caching"
          fi

          if grep -q "timeout-minutes:" .github/workflows/*.yml; then
            echo "‚úÖ Timeouts configured - good for preventing stuck jobs"
          else
            echo "‚ö†Ô∏è  No timeouts found - consider adding to prevent resource waste"
          fi

      - name: Generate performance recommendations
        run: |
          echo "üí° Performance Recommendations:"
          echo "==============================="
          echo ""
          echo "1. Use matrix strategies for parallel execution"
          echo "2. Implement aggressive caching for dependencies"
          echo "3. Use path-based filtering to avoid unnecessary runs"
          echo "4. Set appropriate timeouts for all jobs"
          echo "5. Consider using larger runners for CPU-intensive tasks"
          echo "6. Optimize Docker builds with multi-stage and layer caching"
          echo "7. Run integration tests only when necessary (not on docs changes)"
          echo "8. Use conditional job execution based on file changes"

  security-validation:
    name: Security Configuration Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.validation_type == 'all' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check secret usage
        run: |
          echo "üîê Validating secret usage in workflows..."

          # Check for hardcoded secrets (basic check)
          if grep -r "password\|token\|key" .github/workflows/ | grep -v "secrets\." | grep -v "github.token"; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found - please review"
          else
            echo "‚úÖ No obvious hardcoded secrets detected"
          fi

      - name: Check permissions
        run: |
          echo "üõ°Ô∏è  Checking workflow permissions..."

          # Check if workflows use minimal permissions
          if grep -q "permissions:" .github/workflows/*.yml; then
            echo "‚úÖ Explicit permissions found - good security practice"
          else
            echo "‚ö†Ô∏è  No explicit permissions found - consider adding minimal permissions"
          fi

      - name: Validate security scanning
        run: |
          echo "üîç Validating security scanning configuration..."

          # Check for security scanning in workflows
          if grep -q "security" .github/workflows/*.yml; then
            echo "‚úÖ Security scanning configured"
          else
            echo "‚ö†Ô∏è  No security scanning found - consider adding vulnerability scanning"
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs:
      [
        validate-workflows,
        validate-branch-protection,
        performance-check,
        security-validation,
      ]
    if: always()

    steps:
      - name: Generate validation summary
        run: |
          echo "# CI/CD Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.validate-workflows.result }}" == "success" ]]; then
            echo "‚úÖ **Workflow Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Workflow Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.validate-branch-protection.result }}" == "success" ]]; then
            echo "‚úÖ **Branch Protection Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Branch Protection Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.performance-check.result }}" == "success" ]]; then
            echo "‚úÖ **Performance Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Performance Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security-validation.result }}" == "success" ]]; then
            echo "‚úÖ **Security Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Security Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any failed validations above" >> $GITHUB_STEP_SUMMARY
          echo "2. Update workflow configurations as needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up branch protection rules using provided scripts" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor CI/CD performance and optimize as suggested" >> $GITHUB_STEP_SUMMARY
